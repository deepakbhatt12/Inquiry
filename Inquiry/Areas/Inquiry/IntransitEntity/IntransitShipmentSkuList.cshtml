@model DcmsMobile.Inquiry.Areas.Inquiry.IntransitEntity.IntransitShipmentSkuListViewModel
@{
    //ViewBag.Title = "Closed Shipment SKU Summary";
    var shipCount = 1;
    Layout = MVC_Inquiry.Inquiry.SharedViews.Views._layoutInquiry;
}

@*@section headerleftbuttons
        {
        <a href="@Url.Action(MVC_Inquiry.Inquiry.Summary.InboundShipmentSummary())" class="ui-btn">Shipment Summary</a>
    }*@
<div class="container">
    <div class="page-header">
        <div class="h1">
            Closed Shipment SKU Summary
            @if (Model.TransferShipmentList.Count > 0 || Model.UnknownShipmentList.Count > 0 || Model.VendorShipmentList.Count > 0)
            {
                <form action="@this.Request.Url.PathAndQuery" method="post" style="display:inline-block">
                    <input type="hidden" value="true" name="@MVC_Inquiry.Inquiry.IntransitEntity.InboundShipmentDetailParams.exportExcel" />
                    <button class="btn btn-link" type="submit"><span class="glyphicon glyphicon-export"></span>Excel</button>
                </form>
            }
        </div>
    </div>
    <ul class="nav nav-pills">
        <li>
            <a href="@Url.Action(MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipmentList())" class="ui-btn">Shipment Summary</a>
        </li>
    </ul>

    @for (int i = 0; i < Model.ShipmentLists.Count; i++)
    {
        <div class="list-group">
            <h3 class="list-group-item" style="text-align:center">
                @Model.ShipmentLists[i].DisplayInstransitType
                <span>
                    @if (Model.TotalShipmentRows != null)
                    {
                        @Model.ShipmentLists[i].Shipments.Select(m => m.ShipmentId).Distinct().Count() @:Shipments
                }

                </span>
            </h3>
            @for (var j = 0; j < Model.ShipmentLists[i].Shipments.Count; ++j)
            {
                if (j == 0 || Model.ShipmentLists[i].Shipments[j].ShipmentId != Model.ShipmentLists[i].Shipments[j - 1].ShipmentId)
                {
                    var span = Model.ShipmentLists[i].Shipments.Skip(j).TakeWhile(p => p.ShipmentId == Model.ShipmentLists[i].Shipments[j].ShipmentId).Count();



                    <a href="@Url.Action(MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].ShipmentId))">
                        <div class="list-group-item active">
                            @shipCount.
                            @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ShipmentId)
                            <span class="badge pull-right">@Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ShipmentDate)</span>
                            <span class="pull-right">
                                Sent to ERP: @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].UploadDate)
                            </span>

                            <span>Sewing Plant: @Model.ShipmentLists[i].Shipments[j].SewingPlant</span>
                            <span class="badge"> SKU# @span</span>
                        </div>

                    </a>



                    ++shipCount;
                }
                <div class="list-group-item">
                    <div class="row">
                        <div class=" col-md-4">
                            <p>
                                @Model.ShipmentLists[i].Shipments[j].Style
                                @Model.ShipmentLists[i].Shipments[j].Color
                                @Model.ShipmentLists[i].Shipments[j].Dimension
                                @Model.ShipmentLists[i].Shipments[j].SkuSize
                            </p>
                            <p>
                                Ctn Variance @Html.DisplayFor(m => Model.ShipmentLists[i].Shipments[j].TotalCartonVariance)
                            </p>
                        </div>
                        <div class=" col-md-4">

                            <p>
                                @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ReceivedCartons)
                                of @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ExpectedCartonCount)
                                ctn received
                            </p>
                            @switch (Model.ShipmentLists[i].Shipments[j].CountOtherShipments)
                            {
                                case 0: break;
                                case 1:
                                    <p>
                                        @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ReceivedPiecesByBuddies)
                                        pieces were received after closing against Shipment
                                        @Html.ActionLink(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId))
                                    </p>
                                    break;
                                case 2:
                                <p>
                                    @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ReceivedPiecesByBuddies)
                                    pieces were received after closing against Shipment
                                    @Html.ActionLink(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId))
                                    ,@Html.ActionLink(Model.ShipmentLists[i].Shipments[j].MaxOtherShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].MaxOtherShipmentId)))
                                </p>
                                    break;
                                default:
                                <p>
                                    @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ReceivedPiecesByBuddies)
                                    pieces were received after closing against Shipment
                                    @Html.ActionLink(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId))),
                                    @Html.ActionLink(Model.ShipmentLists[i].Shipments[j].MaxOtherShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].MaxOtherShipmentId))) and
                                    (@Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].CountOtherShipments) - 2) others
                                </p>
                                    break;
                            }
                        </div>
                        <div class=" col-md-4">
                            @*<div class="progress">
                                    <div class="progress-bar" role="progressbar" aria-valuenow="@(Model.ShipmentLists[i].Shipments[j].PercentFull)" aria-valuemin="0" aria-valuemax="@(Model.ShipmentLists[i].Shipments[j].ExpectedPieces.ToString())" style="width:@(Model.ShipmentLists[i].Shipments[j].ReceivedPieces);">
                                       @Html.DisplayFor(m=>m.ShipmentLists[i].Shipments[j].PercentFull)
                                    </div>
                                </div>*@
                            <p>
                                @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ReceivedPieces) of
                                @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ExpectedPieces) pcs received
                            </p>
                            <p class="badge">
                                Psc Variance @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].TotalPiecesVariance)
                            </p>
                        </div>

                    </div>
                </div>
            }
        </div>

    }
</div>


<div data-role="page">
    <div data-role="header">
        <h1>Closed Shipment SKU Summary</h1>
        <div class="rmm" data-menu-style="minimal" data-menu-title="More...">
            <ul>
                <li>
                    <a href="@Url.Action(MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipmentList())" class="ui-btn">Shipment Summary</a>
                </li>

                @if (Model.TransferShipmentList.Count > 0 || Model.UnknownShipmentList.Count > 0 || Model.VendorShipmentList.Count > 0)
                {
                    <li>
                        <form action="@this.Request.Url.PathAndQuery" method="post" style="display:inline-block">
                            <input type="hidden" value="true" name="@MVC_Inquiry.Inquiry.IntransitEntity.InboundShipmentDetailParams.exportExcel" />
                            <button class="ui-btn" type="submit">Excel</button>
                        </form>
                    </li>
                }
            </ul>
        </div>
    </div>
    <div class="ui-content">
        <div data-role="controlgroup" data-type="horizontal" id="filtergroup">
            @using (Html.BeginForm(MVC_Inquiry.Inquiry.IntransitEntity.InboundShipmentDetail(), FormMethod.Get, new { id = "filterForm" }))
            {

                //Hidden fields for the select values in thedropdown in the same page.
                <input id="hfVenShip" type="hidden" name="@Html.NameFor(m=>m.VendorShipments)"
                       @Html.Raw(Model.VendorShipments ? "selected='selected'" : "") />
                <input id="hfBldgTrans" type="hidden" name="@Html.NameFor(m => m.BuildingTransfers)"
                       @Html.Raw(Model.BuildingTransfers ? "selected='selected'" : "") />
                <input id="hfVarianceOnly" type="hidden" name="@Html.NameFor(m => m.VarianceShipmentOnly)"
                       value="false" @Html.Raw(Model.VarianceShipmentOnly ? "selected='selected'" : "") />

                //Hidden fields  to get values of filters in the right pannel.
                <input type="hidden" id="hfFilterSwingPlant" name="@Html.NameFor(m => m.FilterSewingPlant)" value="@Model.FilterSewingPlant" />
                <input type="hidden" id="hfMinClosedDate" name="@Html.NameFor(m => m.MinClosedDate)" value="@string.Format("{0:yyyy/M/d}", Model.MinClosedDate)" />
                <input type="hidden" id="hfMaxClosedDate" name="@Html.NameFor(m => m.MaxClosedDate)" value="@string.Format("{0:yyyy/M/d}", Model.MaxClosedDate)" />


                <label for="filtergroup">Filters</label>
                <select class="shipmentType">
                    <option value="vendorShipment" selected="@Model.VendorShipments">Vendor Shipments</option>
                    <option value="buildingTransfer" selected="@Model.BuildingTransfers">Building Transfer</option>
                </select>
                <select class="skuType">
                    <option value="allSku" selected="@(!Model.VarianceShipmentOnly)">All SKU</option>
                    <option value="varianceSku" selected="@Model.VarianceShipmentOnly">Variance SKU</option>
                </select>

            }
            <a href="#btnFiltersPanelOpen" class="ui-btn ui-icon-bars ui-btn-icon-notext">Filters</a>

            @*@if (Model.TransferShipmentList.Count > 0 || Model.UnknownShipmentList.Count > 0 || Model.VendorShipmentList.Count > 0)
                {
                    <form action="@this.Request.Url.PathAndQuery" method="post" style="display:inline-block">
                        <input type="hidden" value="true" name="@DcmsMobile.Inquiry.Areas.Inquiry.Controllers.SummaryController.InboundShipmentDetailParams.exportExcel" />
                        <button class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" type="submit">Excel</button>
                    </form>
                }*@
        </div>
        @*Filters applied details*@
        <div>
            @if (Model.VendorShipments == false || Model.VarianceShipmentOnly || Model.MinClosedDate != null || Model.MaxClosedDate != null || !string.IsNullOrWhiteSpace(Model.FilterSewingPlant))
            {

                if (Model.MinClosedDate != null || Model.MaxClosedDate != null)
                {
                    <span>Shipments closed between  @Html.DisplayFor(m => m.MinClosedDate) and @Html.DisplayFor(m => m.MaxClosedDate)</span>
                }
                if (!string.IsNullOrWhiteSpace(Model.FilterSewingPlant))
                {
                    <span>Sewing Plant: @Model.FilterSewingPlant</span>
                }
                if (Model.BuildingTransfers)
                {
                    <span>Shipment Type: Building Transfer</span>
                }
                if (Model.VarianceShipmentOnly)
                {
                    @:SKUs with Variance.
   }
<a href="@Url.Action(MVC_Inquiry.Inquiry.IntransitEntity.InboundShipmentDetail())">Reset Filters</a>
            }

            @if (Model.TotalShipmentRows != null)
            {
                @Model.DisplayRowsToShow
            }

        </div>
        @for (int i = 0; i < Model.ShipmentLists.Count; i++)
        {
            <div data-role="collapsible">
                <h3>
                    @Model.ShipmentLists[i].DisplayInstransitType
                    <span class="h3-aside">
                        @if (Model.TotalShipmentRows != null)
                        {
                            @Model.ShipmentLists[i].Shipments.Select(m => m.ShipmentId).Distinct().Count() @:Shipments
                }

                    </span>
                </h3>
                <ul data-role="listview">
                    @for (var j = 0; j < Model.ShipmentLists[i].Shipments.Count; ++j)
                    {
                        if (j == 0 || Model.ShipmentLists[i].Shipments[j].ShipmentId != Model.ShipmentLists[i].Shipments[j - 1].ShipmentId)
                        {
                            var span = Model.ShipmentLists[i].Shipments.Skip(j).TakeWhile(p => p.ShipmentId == Model.ShipmentLists[i].Shipments[j].ShipmentId).Count();
                            <li data-role="list-divider">
                                <h3>
                                    @shipCount.
                                    <strong> @Html.ActionLink(Model.ShipmentLists[i].Shipments[j].ShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].ShipmentId)) </strong>
                                </h3>
                                <p>Sent to ERP: @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].UploadDate)</p>
                                <p class="ui-li-aside">@Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ShipmentDate)</p>
                                <p>Sewing Plant: @Model.ShipmentLists[i].Shipments[j].SewingPlant</p>
                                <p class="ui-li-count"> SKU @span</p>
                            </li> ++shipCount;
                        }
                        <li>
                            <p>
                                @Model.ShipmentLists[i].Shipments[j].Style
                                @Model.ShipmentLists[i].Shipments[j].Color
                                @Model.ShipmentLists[i].Shipments[j].Dimension
                                @Model.ShipmentLists[i].Shipments[j].SkuSize
                            </p>
                            <p>
                                Ctn Variance @Html.DisplayFor(m => Model.ShipmentLists[i].Shipments[j].TotalCartonVariance)
                            </p>

                            <p>
                                @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ReceivedCartons)
                                of @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ExpectedCartonCount)
                                ctn received
                            </p>
                            @switch (Model.ShipmentLists[i].Shipments[j].CountOtherShipments)
                            {
                                case 0: break;
                                case 1:
                                    <p>
                                        @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ReceivedPiecesByBuddies)
                                        pieces were received after closing against Shipment
                                        @Html.ActionLink(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId))
                                    </p>
                                    break;
                                case 2:
                                <p>
                                    @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ReceivedPiecesByBuddies)
                                    pieces were received after closing against Shipment
                                    @Html.ActionLink(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId))
                                    ,@Html.ActionLink(Model.ShipmentLists[i].Shipments[j].MaxOtherShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].MaxOtherShipmentId)))
                                </p>
                                    break;
                                default:
                                <p>
                                    @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ReceivedPiecesByBuddies)
                                    pieces were received after closing against Shipment
                                    @Html.ActionLink(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].MinOtherShipmentId))),
                                    @Html.ActionLink(Model.ShipmentLists[i].Shipments[j].MaxOtherShipmentId, MVC_Inquiry.Inquiry.IntransitEntity.IntransitShipment(Model.ShipmentLists[i].Shipments[j].MaxOtherShipmentId))) and
                                    (@Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].CountOtherShipments) - 2) others
                                </p>
                                    break;
                            }
                            <p class="ui-li-count">
                                @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ReceivedPieces) of
                                @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].ExpectedPieces) pcs received
                            </p>
                            <p class="ui-li-aside">
                                Psc Variance @Html.DisplayFor(m => m.ShipmentLists[i].Shipments[j].TotalPiecesVariance)
                            </p>
                        </li>
                    }
                </ul>
            </div>
        }

        @*Side pannel for extra filters.*@
        <div data-role="panel" id="btnFiltersPanelOpen" data-position="right" data-display="overlay" data-theme="a">
            <h3 class="ui-bar ui-bar-a ui-corner-all">Refine Shipment</h3>
            <fieldset data-role="controlgroup">
                <legend>By Shipment Closed Date</legend>
                <input id="minClosedDate" type="date" data-role="date" placeholder="mm/dd/yyyy(From)" data-clear-btn="true" />
                <input id="maxClosedDate" type="date" data-role="date" placeholder="mm/dd/yyyy(To)" data-clear-btn="true" />
            </fieldset>
            <fieldset data-role="controlgroup">
                <legend>By Sewing Plant</legend>
                @Html.DropDownListFor(m => m.FilterSewingPlant, Model.SewingPlantList, "All", new { id = "filterSwingPlant" })
            </fieldset>
            <div data-role="controlgroup" data-type="horizontal">
                <input id="btnGo" value="Apply" class="ui-btn ui-widget ui-state-default ui-corner-all ui-button-text-only" type="submit">
                <a data-rel="close" class="ui-btn ui-widget ui-state-default ui-corner-all ui-button-text-only">Cancel</a>
            </div>
        </div>

    </div>
</div>
@section script {
    @*<link rel="stylesheet" href="@Links_Inquiry.Content.rmm_css.responsivemobilemenu_css" type="text/css" />
        <script type="text/javascript" src="@Links_Inquiry.Scripts.rmm_js.responsivemobilemenu_js"></script>*@
    <style type="text/css">
        /* h1 within header is specially styles so that the heading uses full width of the screen. Do not use buttons in this header.
            Use h2 to h9 if you want to obtain default jquery mobile styling.*/
        .ui-header h1.ui-title {
            margin-left: 1mm;
            margin-right: 1mm;
        }
    </style>

    @*Added for Datepicker, ref:http://demos.jquerymobile.com/1.4.0/datepicker/*@

    @*<link rel="stylesheet" href="@Links_Inquiry.Content.jquery_mobile_datepicker_css" />
        <link rel="stylesheet" href="@Links_Inquiry.Content.jquery_mobile_datepicker_theme_css" />
        <script src="@Links_Inquiry.Scripts.jquery_ui_1_10_0_js "></script>*@

    <style type="text/css">
        .controlgroup-textinput {
            padding-top: .22em;
            padding-bottom: .22em;
        }
    </style>

    <script type="text/javascript">
        $(document).ready(function () {
            $('#minClosedDate,#maxClosedDate').each(function () {
                $(this).datepicker({
                    altField: "#" + $(this).attr('id') + "1",
                    altFormat: $.datepicker.W3C
                });
            });

            $('select.shipmentType').on('change', function (e) {
                if ($(this).val() === 'vendorShipment') {
                    $('#hfVenShip').attr('value', true);
                    $('#hfBldgTrans').attr('value', false);
                    $('#hfVarianceOnly').attr('value', $('select.skuType').val() === 'varianceSku');
                }
                else {
                    $('#hfBldgTrans').attr('value', true);
                    $('#hfVenShip').attr('value', false);
                    $('#hfVarianceOnly').attr('value', $('select.skuType').val() === 'varianceSku');
                }
                $('#filterForm').submit();
            });

            $('select.skuType').on('change', function (e) {
                $('#hfVarianceOnly').attr('value', $(this).val() === 'varianceSku');
                $('#hfVenShip').attr('value', $('select.shipmentType').val() === 'vendorShipment');
                $('#hfBldgTrans').attr('value', $('select.shipmentType').val() === 'buildingTransfer');
                $('#filterForm').submit();
            });


            $('#btnFiltersPanelOpen').on('click', '#btnGo', function (e) {
                $('#hfMinClosedDate').val($('#minClosedDate').val());
                $('#hfMaxClosedDate').val($('#maxClosedDate').val());
                $('#hfFilterSwingPlant').val($('#filterSwingPlant').val());

                $('#hfVenShip').attr('value', $('select.shipmentType').val() === 'vendorShipment');
                $('#hfBldgTrans').attr('value', $('select.shipmentType').val() === 'buildingTransfer');
                $('#hfVarianceOnly').attr('value', $('select.skuType').val() === 'varianceSku');
                $('#filterForm').submit();
            });

        });
    </script>
}
